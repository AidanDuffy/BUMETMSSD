Aidan Duffy
Boston University
METCS 521

Module 3:
	Lecture 5:
		-
	Lecture 6:
		-

Module 2:
	Lecture 3:
		-reminder that for the project, need to meet the minimum requirements, then can go above and beyond
		-functions like .update which can work on both sets and dictionaries are called polymorphic as they have the same name and general idea, but the implementation is in fact different
		-Python has 10 data types & two special types
			-5 primitives: int, double, char, boolean, complex (2+5i, but python uses j)
			-5 collections: list, tuple, set, string, dictionary
			-2 specials: range (1-20, increasing every x), none
		-other things build on all of these, ie array in numpy is an int list, but cannot contain the other data types
		-compare x = 5 and y = 5.0, if x & y are the same value x == y, to check if they point to the same object do if x is y
			-if x is True is preferred to if x == True
				- same with None
		-can cast int(), float(), and complex()
		-0b,0o, and 0x for the various encodings
		-operator precedence:
			-()
			-**
			- -(negation)
			-*,/,%,//
			- +,-
			-same is left to right, so PEMDAS more or less
		-enhanced for loop is for x in set/list/etc:
		-divmod() combines % and //
	Lecture 4:
		-hash() function returns the hash value, naturally
		-two identical values should return identical hash values
		-two identical strings stored in separate variables also share an id() value
		-random() returns a random number, from the random module
		-mutability:
			-primitives, strings, and tuples are immutable; lists, sets, and dictionaries are mutable
			-if you have a super long string, easier to store everything in a list and change it there as opposed to changing the string
				-changing the string would generate a new string object and redirect the pointer, inefficient for memory
				-sorted(list) creates a new list object, list.sort() does not
			-if a collection containts mutable elements(like a list), it is possible to write an iteration so that all elements are identical



Module 1:
	Lecture 1:
		-Course Overview
			-6 week of instruction, 1 week for final exam and project
			-basic Python overview
			-this will be made up of simple (non-trivial) examples, like lego blocks
			-everything will be visualized, use pythontutor.com
			-de-emphasized quizzes so you can use it as an indicator of what you need to learn
				-quizzes will ask what is a block of code doing, M.C. about outcomes, and T/F
			-project must be individual, shows you mastered basic python structures ie people have done sports rankings, hangman games, etc.
				-think about project that would help advance my career
		-Python Basics
			-no declaration of storage (no need to set a variable as an integer or even declare it as such) like in Java or C
			-its an interpretive language (runs code line by line) not a compiled lang like Java
			-import libraries, not include, but it is similar
			-5 data types and 5 collections:
				-int, String, boolean, float, etc
				-list, dict, set, etc
	Lecture 2:
		-Python Storage
			- x = 5, y = 5.0, x==y is True because the values are equal but x is y is False because they do not point to the same object
			-object = data + methods that operate on this data
		-Structure
			-English has sentences, building blocks of nouns and verbs, with grammar rules
			-Python has statements, building blocks of data types, and syntax rules
		Data Types
			-integers, floats, boolean, char, complex numbers are the primitives
			-lists [], tuples (), set {x,y}, string, dict {a:b} are the collections
		Modules
			-large programs can be split into modules with variables na d functions
				-modules are stored as files
			-a Py script can import individual programs or all programs within a module import math vs from math import p
i